package bl_biblioteca.visao;

import bl_biblioteca.controle.ConectaBanco;
import bl_biblioteca.controle.ControleJtextFieldNumeros;
import bl_biblioteca.controle.ControleJtextFieldStrings;
import bl_biblioteca.controle.ControleExemplar;
import bl_biblioteca.modelo.ModeloExemplar;
import bl_biblioteca.modelo.ModeloTabela;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import org.hsqldb.lib.HashMap;

public class JDBusca extends javax.swing.JDialog {

    ModeloExemplar modExemplar = new ModeloExemplar();
    ControleExemplar controlExemplar = new ControleExemplar();
    ConectaBanco conecta = new ConectaBanco(); // utilizado no metodo preencher tabela
    ConectaBanco conecta2 = new ConectaBanco(); // utilizado no metodo preencher tabela emprestimo

    public JDBusca(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        atualizaCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableExemplar = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldRegistro = new ControleJtextFieldNumeros(8);
        jTextFieldTitulo = new ControleJtextFieldStrings(50);
        jButtonBuscar = new javax.swing.JButton();
        jComboBoxSerie = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextFieldCodigo = new ControleJtextFieldNumeros(8);
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldNome = new ControleJtextFieldStrings(50);
        jButtonBuscar1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEmprestimo = new javax.swing.JTable();
        jCheckBoxHistorico = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Realizar Busca");
        setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jTableExemplar.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTableExemplar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableExemplar);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Título:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Registro:");

        jTextFieldRegistro.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldRegistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldRegistroMouseClicked(evt);
            }
        });

        jTextFieldTitulo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldTitulo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldTituloMouseClicked(evt);
            }
        });

        jButtonBuscar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jComboBoxSerie.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBoxSerie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos" }));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Série:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(69, 178, Short.MAX_VALUE)
                        .addComponent(jButtonBuscar)
                        .addGap(126, 126, 126))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Livros", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jTextFieldCodigo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldCodigoMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Código:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Nome:");

        jTextFieldNome.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextFieldNome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldNomeMouseClicked(evt);
            }
        });
        jTextFieldNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeActionPerformed(evt);
            }
        });

        jButtonBuscar1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonBuscar1.setText("Buscar");
        jButtonBuscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscar1ActionPerformed(evt);
            }
        });

        jTableEmprestimo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTableEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableEmprestimo);

        jCheckBoxHistorico.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBoxHistorico.setText("Mostrar histórico");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxHistorico)))
                        .addGap(66, 175, Short.MAX_VALUE)
                        .addComponent(jButtonBuscar1)
                        .addGap(125, 125, 125))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxHistorico)
                    .addComponent(jButtonBuscar1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Empréstimos", jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1067, 664));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldRegistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldRegistroMouseClicked
        jTextFieldTitulo.setEnabled(false);
        jTextFieldRegistro.setEnabled(true);
        jTextFieldTitulo.setText("");
    }//GEN-LAST:event_jTextFieldRegistroMouseClicked

    private void jTextFieldTituloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldTituloMouseClicked
        jTextFieldTitulo.setEnabled(true);
        jTextFieldRegistro.setEnabled(false);
        jTextFieldRegistro.setText("");
    }//GEN-LAST:event_jTextFieldTituloMouseClicked

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // limpa a tabela caso tenha alguma consultas anteriores
        preencherTabelaExemplar("SELECT exemplar.registro as exemplar, to_char(exemplar.data_entrada, 'DD/MM/YYYY') \n" +
"                     as entrada, livro.registro as registro, livro.titulo as titulo, autor.nome as autor,\n" +
"                    area.nome as area, livro.serie as serie, editora.nome as editora, livro.volume as volume, livro.ano_publicacao as ano\n" +
"                    FROM single.livro as livro\n" +
"                    inner join single.area as area\n" +
"                    on livro.area = area.codigo\n" +
"                    inner join single.editora as editora\n" +
"                    on editora.codigo = livro.editora\n" +
"                    inner join single.autor as autor\n" +
"                    on autor.codigo = livro.autor\n" +
"                    inner join single.exemplar as exemplar\n" +
"                    on exemplar.livro = livro.registro\n" +
"                    where exemplar.registro =  0\n" +
"                    and exemplar.data_saida is null \n" +
"                    order by exemplar.registro");
        
        if (jTextFieldRegistro.isEnabled()) {
            preencherTabelaExemplar("SELECT exemplar.registro as exemplar, to_char(exemplar.data_entrada, 'DD/MM/YYYY') \n"
                    + "\n as entrada, livro.registro as registro, livro.titulo as titulo, autor.nome as autor,\n"
                    + "area.nome as area, livro.serie as serie, editora.nome as editora, livro.volume as volume, livro.ano_publicacao as ano\n"
                    + "FROM single.livro as livro\n"
                    + "inner join single.area as area\n"
                    + "on livro.area = area.codigo\n"
                    + "inner join single.editora as editora\n"
                    + "on editora.codigo = livro.editora\n"
                    + "inner join single.autor as autor\n"
                    + "on autor.codigo = livro.autor\n"
                    + "inner join single.exemplar as exemplar\n"
                    + "on exemplar.livro = livro.registro\n"
                    + "where exemplar.registro =  '" + jTextFieldRegistro.getText() + "'\n"
                    + "and exemplar.data_saida is null \n" // livros que não estão em baixa
                    + "order by exemplar.registro");
        }
        if (jTextFieldTitulo.isEnabled()) {
            String serie = jComboBoxSerie.getSelectedItem().toString();
            if (serie.equals("Todos")) {
                preencherTabelaExemplar("SELECT exemplar.registro as exemplar, to_char(exemplar.data_entrada, 'DD/MM/YYYY') \n"
                        + "\n as entrada, livro.registro as registro, livro.titulo as titulo, autor.nome as autor,\n"
                        + "area.nome as area, livro.serie as serie, editora.nome as editora, livro.volume as volume, livro.ano_publicacao as ano\n"
                        + "FROM single.livro as livro\n"
                        + "inner join single.area as area\n"
                        + "on livro.area = area.codigo\n"
                        + "inner join single.editora as editora\n"
                        + "on editora.codigo = livro.editora\n"
                        + "inner join single.autor as autor\n"
                        + "on autor.codigo = livro.autor\n"
                        + "inner join single.exemplar as exemplar\n"
                        + "on exemplar.livro = livro.registro\n"
                        + "where livro.titulo ~*  '" + jTextFieldTitulo.getText() + "'\n"
                        + "and exemplar.data_saida is null \n"  // livros que não estão em baixa
                        + "order by exemplar.registro");
            } else {
                preencherTabelaExemplar("SELECT exemplar.registro as exemplar, to_char(exemplar.data_entrada, 'DD/MM/YYYY') \n"
                        + "\n as entrada, livro.registro as registro, livro.titulo as titulo, autor.nome as autor,\n"
                        + "area.nome as area, livro.serie as serie, editora.nome as editora, livro.volume as volume, livro.ano_publicacao as ano\n"
                        + "FROM single.livro as livro\n"
                        + "inner join single.area as area\n"
                        + "on livro.area = area.codigo\n"
                        + "inner join single.editora as editora\n"
                        + "on editora.codigo = livro.editora\n"
                        + "inner join single.autor as autor\n"
                        + "on autor.codigo = livro.autor\n"
                        + "inner join single.exemplar as exemplar\n"
                        + "on exemplar.livro = livro.registro\n"
                        + "where livro.titulo ~*  '" + jTextFieldTitulo.getText() + "'\n"
                        + "and livro.serie ~* '" + serie + "' \n"
                        + "and exemplar.data_saida is null \n"  // livros que não estão em baixa
                        + "order by exemplar.registro");
            }
        }
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jTextFieldCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldCodigoMouseClicked
        jTextFieldNome.setEnabled(false);
        jTextFieldCodigo.setEnabled(true);
        jTextFieldNome.setText("");
    }//GEN-LAST:event_jTextFieldCodigoMouseClicked

    private void jTextFieldNomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldNomeMouseClicked
        jTextFieldCodigo.setEnabled(false);
        jTextFieldNome.setEnabled(true);
        jTextFieldCodigo.setText("");
    }//GEN-LAST:event_jTextFieldNomeMouseClicked

    private void jButtonBuscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscar1ActionPerformed
        // limpa a tabela caso tenha realizado alguma consulta anteriormente
        preencherTabelaEmprestimo("SELECT exemplar.registro as exemplar, livro.titulo as titulo, area.nome as area,  livro.volume as volume, \n"
                        + "livro.serie as serie, atendente.nome as atendente, to_char (emprestimo.data_hora, 'dd/mm/yyyy HH24:MI:SS ')  as hora\n"
                        + "FROM single.livro as livro\n"
                        + "INNER JOIN single.exemplar as exemplar\n"
                        + "on exemplar.livro = livro.registro\n"
                        + "inner join single.emprestimo as emprestimo\n"
                        + "on emprestimo.exemplar = exemplar.registro\n"
                        + "inner join single.atendente as atendente\n"
                        + "on emprestimo.atendente = atendente.id\n"
                        + "inner join single.users as users\n"
                        + "on users.id = emprestimo.users\n"
                        + "inner join single.area as area\n"
                        + "on area.codigo = livro.area\n"
                        + "where emprestimo.users = 99999 \n"
                        + "order by emprestimo.data_hora desc");
        if (jTextFieldCodigo.isEnabled()) {
            if (jCheckBoxHistorico.isSelected()) {
                preencherTabelaEmprestimo("SELECT exemplar.registro as exemplar, livro.titulo as titulo, area.nome as area,  livro.volume as volume, \n"
                        + "livro.serie as serie, atendente.nome as atendente, to_char (emprestimo.data_hora, 'dd/mm/yyyy HH24:MI:SS ')  as hora\n"
                        + "FROM single.livro as livro\n"
                        + "INNER JOIN single.exemplar as exemplar\n"
                        + "on exemplar.livro = livro.registro\n"
                        + "inner join single.emprestimo as emprestimo\n"
                        + "on emprestimo.exemplar = exemplar.registro\n"
                        + "inner join single.atendente as atendente\n"
                        + "on emprestimo.atendente = atendente.id\n"
                        + "inner join single.users as users\n"
                        + "on users.id = emprestimo.users\n"
                        + "inner join single.area as area\n"
                        + "on area.codigo = livro.area\n"
                        + "where emprestimo.users = '" + jTextFieldCodigo.getText() + "' \n"
                        + "order by emprestimo.data_hora desc");
            } else {
                preencherTabelaEmprestimo("SELECT exemplar.registro as exemplar, livro.titulo as titulo, area.nome as area,  livro.volume as volume, \n"
                        + "livro.serie as serie, atendente.nome as atendente, to_char (emprestimo.data_hora, 'dd/mm/yyyy HH24:MI:SS ')  as hora\n"
                        + "FROM single.livro as livro\n"
                        + "INNER JOIN single.exemplar as exemplar\n"
                        + "on exemplar.livro = livro.registro\n"
                        + "inner join single.emprestimo as emprestimo\n"
                        + "on emprestimo.exemplar = exemplar.registro\n"
                        + "inner join single.atendente as atendente\n"
                        + "on emprestimo.atendente = atendente.id\n"
                        + "inner join single.users as users\n"
                        + "on users.id = emprestimo.users\n"
                        + "inner join single.area as area\n"
                        + "on area.codigo = livro.area\n"
                        + "where emprestimo.users = '" + jTextFieldCodigo.getText() + "' \n"
                        + "and emprestimo.status is true\n"
                        + "order by emprestimo.data_hora desc");
            }
        }

        if (jTextFieldNome.isEnabled()) {
            if (jCheckBoxHistorico.isSelected()) {
                preencherTabelaEmprestimo("SELECT exemplar.registro as exemplar, livro.titulo as titulo, area.nome as area,  livro.volume as volume, \n"
                        + "livro.serie as serie, atendente.nome as atendente, to_char (emprestimo.data_hora, 'dd/mm/yyyy HH24:MI:SS ')  as hora\n"
                        + "FROM single.livro as livro\n"
                        + "INNER JOIN single.exemplar as exemplar\n"
                        + "on exemplar.livro = livro.registro\n"
                        + "inner join single.emprestimo as emprestimo\n"
                        + "on emprestimo.exemplar = exemplar.registro\n"
                        + "inner join single.atendente as atendente\n"
                        + "on emprestimo.atendente = atendente.id\n"
                        + "inner join single.users as users\n"
                        + "on users.id = emprestimo.users\n"
                        + "inner join single.area as area\n"
                        + "on area.codigo = livro.area\n"
                        + "where users.name ~* '"+jTextFieldNome.getText()+"' \n"
                        + "order by emprestimo.data_hora desc");
            } else {
                preencherTabelaEmprestimo("SELECT exemplar.registro as exemplar, livro.titulo as titulo, area.nome as area,  livro.volume as volume, \n"
                        + "livro.serie as serie, atendente.nome as atendente, to_char (emprestimo.data_hora, 'dd/mm/yyyy HH24:MI:SS ')  as hora\n"
                        + "FROM single.livro as livro\n"
                        + "INNER JOIN single.exemplar as exemplar\n"
                        + "on exemplar.livro = livro.registro\n"
                        + "inner join single.emprestimo as emprestimo\n"
                        + "on emprestimo.exemplar = exemplar.registro\n"
                        + "inner join single.atendente as atendente\n"
                        + "on emprestimo.atendente = atendente.id\n"
                        + "inner join single.users as users\n"
                        + "on users.id = emprestimo.users\n"
                        + "inner join single.area as area\n"
                        + "on area.codigo = livro.area\n"
                        + "where users.name ~* '"+jTextFieldNome.getText()+"' \n"
                        + "and emprestimo.status is true\n"
                        + "order by emprestimo.data_hora desc");
            }
        }

    }//GEN-LAST:event_jButtonBuscar1ActionPerformed

    private void jTextFieldNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeActionPerformed

    
    public void preencherTabelaExemplar(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Registro", "Título", "Autor", "Área", "Série", "Editora", "Volume", "Ano", "Entrada"};
        conecta.conexao();
        conecta.executaSQL(sql);
        try {
            conecta.rs.first();
            do {
                dados.add(new Object[]{conecta.rs.getInt("exemplar"),
                    conecta.rs.getString("titulo"), conecta.rs.getString("autor"),
                    conecta.rs.getString("area"), conecta.rs.getString("serie"),
                    conecta.rs.getString("editora"), conecta.rs.getInt("volume"),
                    conecta.rs.getInt("ano"), conecta.rs.getString("entrada")});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
            //JOptionPane.showMessageDialog(rootPane, "Erro ao exibir tabela! \n ERRO:" + ex);
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTableExemplar.setModel(modelo);
        jTableExemplar.getColumnModel().getColumn(0).setPreferredWidth(80);
        jTableExemplar.getColumnModel().getColumn(0).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(1).setPreferredWidth(266);
        jTableExemplar.getColumnModel().getColumn(1).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(2).setPreferredWidth(170);
        jTableExemplar.getColumnModel().getColumn(2).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(3).setPreferredWidth(110);
        jTableExemplar.getColumnModel().getColumn(3).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(4).setPreferredWidth(50);
        jTableExemplar.getColumnModel().getColumn(4).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(5).setPreferredWidth(70);
        jTableExemplar.getColumnModel().getColumn(5).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(6).setPreferredWidth(70);
        jTableExemplar.getColumnModel().getColumn(6).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(7).setPreferredWidth(70);
        jTableExemplar.getColumnModel().getColumn(7).setResizable(false);
        jTableExemplar.getColumnModel().getColumn(8).setPreferredWidth(100);
        jTableExemplar.getColumnModel().getColumn(8).setResizable(false);
        jTableExemplar.getTableHeader().setReorderingAllowed(false);
        jTableExemplar.setAutoResizeMode(jTableExemplar.AUTO_RESIZE_OFF);
        jTableExemplar.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        conecta.desconectar();
    }

    public void preencherTabelaEmprestimo(String sql) {
        ArrayList dados = new ArrayList();
        String[] Colunas = new String[]{"Registro", "Título", "Área", "Volume", "Série", "Atendente", "Horário"};
        conecta.conexao();
        conecta.executaSQL(sql);
        try {
            conecta.rs.first();
            do {
                dados.add(new Object[]{conecta.rs.getInt("exemplar"),
                    conecta.rs.getString("titulo"),
                    conecta.rs.getString("area"),
                    conecta.rs.getInt("volume"),
                    conecta.rs.getString("serie"),
                    conecta.rs.getString("atendente"),
                    conecta.rs.getString("hora")});
            } while (conecta.rs.next());
        } catch (SQLException ex) {
            //JOptionPane.showMessageDialog(rootPane, "Erro ao exibir tabela! \n ERRO:" + ex);
        }
        ModeloTabela modelo = new ModeloTabela(dados, Colunas);
        jTableEmprestimo.setModel(modelo);
        jTableEmprestimo.getColumnModel().getColumn(0).setPreferredWidth(80);
        jTableEmprestimo.getColumnModel().getColumn(0).setResizable(false);
        jTableEmprestimo.getColumnModel().getColumn(1).setPreferredWidth(266);
        jTableEmprestimo.getColumnModel().getColumn(1).setResizable(false);
        jTableEmprestimo.getColumnModel().getColumn(2).setPreferredWidth(110);
        jTableEmprestimo.getColumnModel().getColumn(2).setResizable(false);
        jTableEmprestimo.getColumnModel().getColumn(3).setPreferredWidth(80);
        jTableEmprestimo.getColumnModel().getColumn(3).setResizable(false);
        jTableEmprestimo.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTableEmprestimo.getColumnModel().getColumn(4).setResizable(false);
        jTableEmprestimo.getColumnModel().getColumn(5).setPreferredWidth(210);
        jTableEmprestimo.getColumnModel().getColumn(5).setResizable(false);
        jTableEmprestimo.getColumnModel().getColumn(6).setPreferredWidth(175);
        jTableEmprestimo.getColumnModel().getColumn(6).setResizable(false);
        jTableEmprestimo.getTableHeader().setReorderingAllowed(false);
        jTableEmprestimo.setAutoResizeMode(jTableExemplar.AUTO_RESIZE_OFF);
        jTableEmprestimo.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        conecta.desconectar();
    }

    void atualizaCombobox() {
        conecta.conexao();
        conecta.executaSQL("SELECT DISTINCT serie from single.livro order by serie");

        try {
            conecta.rs.first();
            do {
                jComboBoxSerie.addItem(conecta.rs.getString("serie"));
            } while (conecta.rs.next());

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao preencher combobox série" + ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDBusca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDBusca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDBusca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDBusca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDBusca dialog = new JDBusca(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonBuscar1;
    private javax.swing.JCheckBox jCheckBoxHistorico;
    private javax.swing.JComboBox jComboBoxSerie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableEmprestimo;
    private javax.swing.JTable jTableExemplar;
    private javax.swing.JTextField jTextFieldCodigo;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldRegistro;
    private javax.swing.JTextField jTextFieldTitulo;
    // End of variables declaration//GEN-END:variables

    void setAccelerator(KeyStroke keyStroke) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
